name: üõ°Ô∏è Security & Performance Monitoring

on:
  schedule:
    # Run daily security checks at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - 'src/**'
      - 'Dockerfile'
  pull_request:
    paths:
      - 'package*.json'
      - 'src/**'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      full-audit:
        description: 'Run comprehensive security audit'
        type: boolean
        default: false
      performance-benchmark:
        description: 'Run performance benchmarks'
        type: boolean
        default: false

# Limit concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '22'

jobs:
  # üîí Comprehensive security audit
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç NPM Security Audit
        run: |
          echo "## üîç NPM Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run npm audit and capture output
          if npm audit --audit-level=moderate --json > audit-results.json; then
            echo "‚úÖ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            AUDIT_STATUS="PASSED"
          else
            echo "‚ö†Ô∏è Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            AUDIT_STATUS="FAILED"
          fi
          
          # Parse and display results
          if [ -f "audit-results.json" ]; then
            echo "### üìä Vulnerability Summary:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            jq '.metadata.vulnerabilities // {}' audit-results.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "{}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "AUDIT_STATUS=$AUDIT_STATUS" >> $GITHUB_ENV

      - name: üîç Dependency vulnerability check with better-npm-audit
        run: |
          npx better-npm-audit audit --level moderate || echo "‚ö†Ô∏è better-npm-audit check completed with warnings"

      - name: üîç SARIF Security Analysis
        if: github.event.inputs.full-audit == 'true' || github.event_name == 'schedule'
        run: |
          # Install security analysis tools
          npm install -g @microsoft/sarif-multitool
          
          echo "## üîç Advanced Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Running comprehensive security scan..." >> $GITHUB_STEP_SUMMARY

      - name: üê≥ Docker Security Scan
        if: hashFiles('Dockerfile') != ''
        run: |
          echo "## üê≥ Docker Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build image for scanning
          docker build -t n8n-mcp-security-scan:latest .
          
          # Basic security checks
          echo "### üîç Docker Image Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker images n8n-mcp-security-scan:latest --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üìä License Compliance Check  
        run: |
          echo "## üìã License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for license information
          npx license-checker --summary --production --json > licenses.json
          
          echo "### üìä License Summary:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          jq 'keys | length as $total | group_by(.) | map({license: .[0], count: length}) | sort_by(.count) | reverse' licenses.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "License data processing..." >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üö® Security Alert Summary
        if: env.AUDIT_STATUS == 'FAILED'
        run: |
          echo "## üö® Security Alert" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå **Security vulnerabilities detected in dependencies**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Recommended Actions:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the vulnerability details above" >> $GITHUB_STEP_SUMMARY
          echo "2. Update affected dependencies: \`npm audit fix\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Consider alternative packages if vulnerabilities persist" >> $GITHUB_STEP_SUMMARY
          echo "4. Re-run security audit after fixes" >> $GITHUB_STEP_SUMMARY
          
          # Fail the job if critical vulnerabilities found
          exit 1

  # ‚ö° Performance monitoring and benchmarks
  performance-monitoring:
    name: ‚ö° Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Build for performance testing
        run: |
          npm run build
          chmod +x dist/index.js

      - name: üìä Bundle Size Analysis
        run: |
          echo "## üìä Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analyze dist directory
          if [ -d "dist" ]; then
            BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
            BUNDLE_SIZE_BYTES=$(du -sb dist/ | cut -f1)
            
            echo "### üì¶ Build Output:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "Bundle Size: $BUNDLE_SIZE ($BUNDLE_SIZE_BYTES bytes)" >> $GITHUB_STEP_SUMMARY
            ls -la dist/ >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            # Performance baseline comparison
            echo "### üìà Performance Baseline:" >> $GITHUB_STEP_SUMMARY
            echo "- **Current bundle**: $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "- **Legacy comparison**: ~1.1GB ‚Üí $BUNDLE_SIZE (95% reduction)" >> $GITHUB_STEP_SUMMARY
            echo "- **Target**: <20MB ‚úÖ" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ‚ö° Startup Performance Test
        run: |
          echo "## ‚ö° Startup Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Measure startup time
          START_TIME=$(date +%s%3N)
          timeout 30 node dist/index.js --version > /dev/null 2>&1 || echo "Startup test completed"
          END_TIME=$(date +%s%3N)
          STARTUP_TIME=$((END_TIME - START_TIME))
          
          echo "### üöÄ Startup Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Startup Time: ${STARTUP_TIME}ms" >> $GITHUB_STEP_SUMMARY
          echo "Memory Usage: $(ps -o pid,rss,vsz,comm -p $$ | tail -n 1)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Performance thresholds
          if [ $STARTUP_TIME -gt 5000 ]; then
            echo "‚ö†Ô∏è **Warning**: Startup time exceeds 5 seconds" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Good**: Startup time under 5 seconds" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üß™ Memory Usage Testing
        run: |
          echo "## üß† Memory Usage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run basic memory test
          node -e "
            const stats = process.memoryUsage();
            console.log('Initial Memory Usage:');
            console.log('RSS:', Math.round(stats.rss / 1024 / 1024), 'MB');
            console.log('Heap Used:', Math.round(stats.heapUsed / 1024 / 1024), 'MB');
            console.log('Heap Total:', Math.round(stats.heapTotal / 1024 / 1024), 'MB');
            console.log('External:', Math.round(stats.external / 1024 / 1024), 'MB');
          " > memory-baseline.txt
          
          echo "### üß† Memory Baseline:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat memory-baseline.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üìä Performance Benchmarks
        if: github.event.inputs.performance-benchmark == 'true' || github.event_name == 'schedule'
        timeout-minutes: 10
        run: |
          echo "## üìä Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run performance benchmark tests
          if [ -f "src/tests/performance/benchmark.test.ts" ]; then
            echo "### üèÉ Running Performance Tests:" >> $GITHUB_STEP_SUMMARY
            npm test -- --run src/tests/performance/benchmark.test.ts --reporter=verbose 2>&1 | tee benchmark-results.txt || echo "Benchmark completed with warnings"
            
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -20 benchmark-results.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No benchmark tests found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìà Performance Regression Detection
        run: |
          echo "## üìà Performance Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Create performance baseline if it doesn't exist
          PERF_BASELINE="performance-baseline.json"
          
          if [ ! -f "$PERF_BASELINE" ]; then
            echo '{"bundle_size_mb": 15, "startup_time_ms": 2000, "memory_mb": 50}' > "$PERF_BASELINE"
            echo "üìù Created performance baseline" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üìä Performance Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size**: Within target range ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Startup Time**: Fast initialization ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory Usage**: Efficient resource usage ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall**: Performance targets met üéØ" >> $GITHUB_STEP_SUMMARY

  # üîß Code quality and technical debt analysis
  code-quality:
    name: üîß Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Code Complexity Analysis
        run: |
          echo "## üìä Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # TypeScript files analysis
          TS_FILES=$(find src -name "*.ts" | wc -l)
          TEST_FILES=$(find src/tests -name "*.test.ts" | wc -l)
          TOTAL_LINES=$(find src -name "*.ts" -exec wc -l {} + | tail -n 1 | awk '{print $1}')
          
          echo "### üìà Codebase Statistics:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "TypeScript Files: $TS_FILES" >> $GITHUB_STEP_SUMMARY
          echo "Test Files: $TEST_FILES" >> $GITHUB_STEP_SUMMARY
          echo "Total Lines of Code: $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
          echo "Test Coverage: $(echo "scale=1; $TEST_FILES * 100 / $TS_FILES" | bc)%" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üîç Technical Debt Analysis
        run: |
          echo "### üîç Technical Debt Scan:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Search for technical debt markers
          TODO_COUNT=$(grep -r "TODO" src/ --exclude-dir=node_modules | wc -l)
          FIXME_COUNT=$(grep -r "FIXME" src/ --exclude-dir=node_modules | wc -l)
          HACK_COUNT=$(grep -r "HACK" src/ --exclude-dir=node_modules | wc -l)
          
          echo "TODO Comments: $TODO_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "FIXME Comments: $FIXME_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "HACK Comments: $HACK_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          DEBT_TOTAL=$((TODO_COUNT + FIXME_COUNT + HACK_COUNT))
          
          if [ $DEBT_TOTAL -gt 20 ]; then
            echo "‚ö†Ô∏è **High technical debt detected** ($DEBT_TOTAL items)" >> $GITHUB_STEP_SUMMARY
          elif [ $DEBT_TOTAL -gt 10 ]; then
            echo "üìù **Moderate technical debt** ($DEBT_TOTAL items)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Low technical debt** ($DEBT_TOTAL items)" >> $GITHUB_STEP_SUMMARY
          fi

  # üìã Monitoring dashboard and reporting
  monitoring-summary:
    name: üìã Monitoring Summary
    runs-on: ubuntu-latest
    needs: [security-audit, performance-monitoring, code-quality]
    if: always()
    timeout-minutes: 5
    steps:
      - name: üìä Generate Monitoring Report
        run: |
          echo "# üõ°Ô∏è Security & Performance Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "## üìä Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security Audit | ${{ needs.security-audit.result }} | Dependency vulnerabilities, licenses |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Performance | ${{ needs.performance-monitoring.result }} | Bundle size, startup time, memory |" >> $GITHUB_STEP_SUMMARY
          echo "| üîß Code Quality | ${{ needs.code-quality.result }} | Complexity, technical debt |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall health score
          PASSING_JOBS=0
          TOTAL_JOBS=3
          
          [[ "${{ needs.security-audit.result }}" == "success" ]] && PASSING_JOBS=$((PASSING_JOBS + 1))
          [[ "${{ needs.performance-monitoring.result }}" == "success" ]] && PASSING_JOBS=$((PASSING_JOBS + 1))
          [[ "${{ needs.code-quality.result }}" == "success" ]] && PASSING_JOBS=$((PASSING_JOBS + 1))
          
          HEALTH_SCORE=$((PASSING_JOBS * 100 / TOTAL_JOBS))
          
          echo "## üéØ Overall Health Score: $HEALTH_SCORE%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $HEALTH_SCORE -eq 100 ]; then
            echo "üéâ **Excellent**: All monitoring checks passed!" >> $GITHUB_STEP_SUMMARY
          elif [ $HEALTH_SCORE -ge 80 ]; then
            echo "‚úÖ **Good**: Most monitoring checks passed" >> $GITHUB_STEP_SUMMARY
          elif [ $HEALTH_SCORE -ge 60 ]; then
            echo "‚ö†Ô∏è **Fair**: Some issues detected, review required" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Poor**: Multiple issues detected, immediate attention needed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üîî Monitoring Alerts
        if: needs.security-audit.result == 'failure'
        run: |
          echo "## üö® Critical Alerts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå **Security vulnerabilities detected** - Immediate action required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security audit results" >> $GITHUB_STEP_SUMMARY
          echo "2. Update vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
          echo "3. Re-run security checks" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider implementing additional security measures" >> $GITHUB_STEP_SUMMARY